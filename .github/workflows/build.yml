name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Frontend Build and Test Job
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Frontend Tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false --passWithNoTests

      - name: Check Frontend Coverage
        run: |
          cd frontend
          if [ -f "coverage/coverage-summary.json" ]; then
            node -e "
              const coverage = require('./coverage/coverage-summary.json');
              const threshold = 80;
              const lines = coverage.total.lines.pct;
              console.log(\`Line coverage: \${lines}%\`);
              if (lines < threshold) {
                console.log(\`❌ Coverage \${lines}% below threshold \${threshold}%\`);
                process.exit(1);
              }
              console.log(\`✅ Coverage \${lines}% meets threshold\`);
            "
          fi

      - name: Build Frontend
        run: |
          cd frontend
          npm run build

      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/
          retention-days: 7

  # Backend Build and Test Job
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image for Testing
        run: |
          cd backend
          docker build -t backend-test:latest .

      - name: Run Backend Tests in Docker
        run: |
          docker run --rm \
            -e DEBUG=False \
            -e SECRET_KEY=test-secret-key-for-ci \
            -e DATABASE_URL=sqlite:///test.db \
            backend-test:latest \
            sh -c "
              python -m coverage run --source='.' manage.py test &&
              python -m coverage xml &&
              python -m coverage report --fail-under=80
            "

      - name: Extract Coverage Report
        run: |
          # Create container to copy files from
          docker create --name temp-container backend-test:latest
          docker cp temp-container:/app/coverage.xml ./coverage.xml
          docker rm temp-container

      - name: Upload Backend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: coverage.xml
          retention-days: 7

  # Integration Tests (only on main branch)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Image
        run: |
          cd backend
          docker build -t backend:latest .

      - name: Start Backend Container
        run: |
          docker run -d \
            --name backend-container \
            -p 8000:8000 \
            -e SECRET_KEY=integration-test-key-for-ci \
            -e DEBUG=False \
            -e DATABASE_URL=sqlite:///integration_test.db \
            backend:latest

      - name: Wait for Backend
        run: |
          echo "Waiting for backend to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8000/health/ 2>/dev/null; then
              echo "✅ Backend is ready!"
              break
            fi
            echo "Attempt $i/30 - Backend not ready yet..."
            sleep 2
          done

      - name: Run Integration Tests
        run: |
          # Test API endpoints
          echo "Testing API endpoints..."

          # Health check
          curl -f http://localhost:8000/health/ || (echo "❌ Health check failed" && exit 1)
          echo "✅ Health check passed"

          # Add more integration tests here
          # curl -f http://localhost:8000/api/users/ || (echo "❌ Users API failed" && exit 1)
          # echo "✅ Users API passed"

      - name: Cleanup
        if: always()
        run: |
          docker stop backend-container || true
          docker rm backend-container || true

  # Docker Registry Push (only on main branch)
  docker-registry:
    name: Push to Container Registry
    runs-on: ubuntu-latest
    needs: [frontend, backend, integration]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/backend:latest
            ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
