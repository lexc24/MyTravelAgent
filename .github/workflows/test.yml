name: Test Code Base

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  environment-tests:
    name: Environment & Configuration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      
      - name: Install Dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run Migrations & Collect Static
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          SECRET_KEY: ${{ secrets.SECRET_KEY || 'fallback-secret-key-for-ci-testing-must-be-at-least-fifty-characters-long-to-pass-security-tests' }}
          DEBUG: "False"
          RENDER: "true"
          RENDER_SERVICE_NAME: "ci-test-service"  # Mock this for CI
        run: |
          cd backend
          python manage.py migrate --noinput
          python manage.py collectstatic --noinput
          
      - name: Run Environment Tests
        env:
          ENVIRONMENT: staging
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          SECRET_KEY: ${{ secrets.SECRET_KEY || 'fallback-secret-key-for-ci-testing-must-be-at-least-fifty-characters-long' }}
          DEBUG: "False"
          RENDER: "true"
          RENDER_SERVICE_NAME: "ci-test-service"  # Mock this for CI
          GEMINI_API_KEY: "mock-key-for-testing-not-real"  # Mock API key
        run: |
          cd backend
          python manage.py test tests.environment_tests --verbosity=2

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: environment-tests
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      
      - name: Install Dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run Migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          SECRET_KEY: integration-test-secret-key-must-be-fifty-chars-long
          DEBUG: "False"
        run: |
          cd backend
          python manage.py migrate --noinput
          
      - name: Run Integration Tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          SECRET_KEY: integration-test-secret-key-must-be-fifty-chars-long
          DEBUG: "False"
          GEMINI_API_KEY: "mock-key-for-testing"
          SKIP_EXTERNAL_API_TESTS: "1"
        run: |
          cd backend
          python manage.py test tests.integration_tests --verbosity=2

  all-tests-passed:
    name: All CI/CD Tests Passed ✅
    runs-on: ubuntu-latest
    needs: [environment-tests, integration-tests]
    if: always()
    
    steps:
      - name: Check All Test Results
        run: |
          if [ "${{ needs.environment-tests.result }}" != "success" ]; then
            echo "❌ Environment tests failed"
            exit 1
          fi
          if [ "${{ needs.integration-tests.result }}" != "success" ]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          echo "✅ All CI/CD tests passed - ready for deployment!"